"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram-–±–æ—Ç–∞
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
import logging

from settings.config import TELEGRAM_ADMIN_ID
from settings.database import Database
from utils.google_sheets import GoogleSheetsManager
from .states import ComplaintStates, EmployeeStates
from .keyboards import Keyboards
from .enums import CallbackData, Messages, Categories
from utils.media_handler import MediaHandler

logger = logging.getLogger(__name__)
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = Database()
media_handler = MediaHandler()
sheets_manager = GoogleSheetsManager()


async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == TELEGRAM_ADMIN_ID


async def has_access(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –±–æ—Ç—É"""
    if await is_admin(user_id):
        return True
    return await db.is_employee_active(user_id)


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
    if message.chat.type != "private":
        await message.answer("‚ùå –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö.")
        return
    
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not await has_access(user_id):
        await message.answer(Messages.ACCESS_DENIED.value)
        return
    
    await state.clear()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    if await is_admin(user_id):
        keyboard = Keyboards.main_menu_admin()
        text = Messages.WELCOME_ADMIN.value
    else:
        keyboard = Keyboards.main_menu_employee()
        text = Messages.WELCOME_EMPLOYEE.value
    
    await message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data == CallbackData.BACK_TO_MAIN.value)
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()
    await state.clear()
    
    user_id = callback.from_user.id
    
    if await is_admin(user_id):
        keyboard = Keyboards.main_menu_admin()
        text = Messages.WELCOME_ADMIN.value
    else:
        keyboard = Keyboards.main_menu_employee()
        text = Messages.WELCOME_EMPLOYEE.value
    
    await callback.message.edit_text(text, reply_markup=keyboard)


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê–ú–ò ===

@router.callback_query(F.data == CallbackData.EMPLOYEES_MENU.value)
async def employees_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏"""
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    await state.clear()
    keyboard = Keyboards.employees_menu()
    await callback.message.edit_text(Messages.EMPLOYEES_MENU.value, reply_markup=keyboard)


@router.callback_query(F.data == CallbackData.BACK_TO_EMPLOYEES.value)
async def back_to_employees(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    await callback.answer()
    await state.clear()
    
    keyboard = Keyboards.employees_menu()
    await callback.message.edit_text(Messages.EMPLOYEES_MENU.value, reply_markup=keyboard)


@router.callback_query(F.data == CallbackData.ADD_EMPLOYEE.value)
async def add_employee_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    await callback.answer()
    
    await state.set_state(EmployeeStates.entering_employee_id)
    await callback.message.edit_text(Messages.ADD_EMPLOYEE_ID.value)


@router.message(StateFilter(EmployeeStates.entering_employee_id))
async def add_employee_id(message: Message, state: FSMContext):
    """–í–≤–æ–¥ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        employee_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
        existing = await db.get_employee_by_telegram_id(employee_id)
        if existing:
            await message.answer("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        await state.update_data(employee_id=employee_id)
        await state.set_state(EmployeeStates.entering_employee_name)
        await message.answer(Messages.ADD_EMPLOYEE_NAME.value)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID:")


@router.message(StateFilter(EmployeeStates.entering_employee_name))
async def add_employee_name(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    name = message.text.strip()
    
    if len(name) < 2:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
        return
    
    data = await state.get_data()
    employee_id = data['employee_id']
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = await db.add_employee(employee_id, name)
    
    if success:
        await message.answer(Messages.EMPLOYEE_ADDED.value, reply_markup=Keyboards.back_to_employees())
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {name} (ID: {employee_id})")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", reply_markup=Keyboards.back_to_employees())
    
    await state.clear()


@router.callback_query(F.data == CallbackData.LIST_EMPLOYEES.value)
async def list_employees(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    await callback.answer()
    
    employees = await db.get_employees()
    
    if not employees:
        await callback.message.edit_text(
            Messages.NO_EMPLOYEES.value,
            reply_markup=Keyboards.back_to_employees()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    text = "üë• –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n"
    for _, telegram_id, name in employees:
        text += f"‚Ä¢ {name} - _{telegram_id}_\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=Keyboards.back_to_employees(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == CallbackData.DELETE_EMPLOYEE.value)
async def delete_employee_start(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    await callback.answer()
    
    employees = await db.get_employees()
    
    if not employees:
        await callback.message.edit_text(
            Messages.NO_EMPLOYEES.value,
            reply_markup=Keyboards.back_to_employees()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    text = "üóë –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for i, (_, _, name) in enumerate(employees, 1):
        text += f"{i}. {name}\n"
    
    keyboard = Keyboards.delete_employees(employees)
    await callback.message.edit_text(text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("delete_emp_"))
async def confirm_delete_employee(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    await callback.answer()
    
    employee_id = int(callback.data.replace("delete_emp_", ""))
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
    employees = await db.get_employees()
    employee_info = None
    
    for emp_id, telegram_id, name in employees:
        if emp_id == employee_id:
            employee_info = (emp_id, telegram_id, name)
            break
    
    if not employee_info:
        await callback.message.edit_text(
            "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=Keyboards.back_to_employees()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.update_data(delete_employee_id=employee_id)
    
    text = f"‚ùì –¢–æ—á–Ω–æ –ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_info[2]}?"
    keyboard = Keyboards.confirm_delete()
    
    await callback.message.edit_text(text, reply_markup=keyboard)


@router.callback_query(F.data == CallbackData.CONFIRM_DELETE.value)
async def delete_employee_confirmed(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    await callback.answer()
    
    data = await state.get_data()
    employee_id = data.get('delete_employee_id')
    
    if not employee_id:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
            reply_markup=Keyboards.back_to_employees()
        )
        return
    
    success = await db.delete_employee(employee_id)
    
    if success:
        text = "‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
    else:
        text = "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
    
    await callback.message.edit_text(text, reply_markup=Keyboards.back_to_employees())
    await state.clear()


@router.callback_query(F.data == CallbackData.CANCEL_DELETE.value)
async def cancel_delete_employee(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    await callback.answer()
    await state.clear()
    
    keyboard = Keyboards.employees_menu()
    await callback.message.edit_text(Messages.EMPLOYEES_MENU.value, reply_markup=keyboard)


# === –ü–†–û–¶–ï–°–° –ü–û–î–ê–ß–ò –ñ–ê–õ–û–ë–´ ===

@router.callback_query(F.data == CallbackData.START_COMPLAINT.value)
async def start_complaint(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã"""
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not await has_access(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    await state.set_state(ComplaintStates.choosing_category)
    
    keyboard = Keyboards.categories()
    await callback.message.edit_text(Messages.CHOOSE_CATEGORY.value, reply_markup=keyboard)


@router.callback_query(F.data.startswith(CallbackData.CATEGORY_PREFIX.value), StateFilter(ComplaintStates.choosing_category))
async def choose_category(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await callback.answer()
    
    category = callback.data.replace(CallbackData.CATEGORY_PREFIX.value, "")
    await state.update_data(category=category)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)
    employees = await db.get_employees()
    
    if not employees:
        await callback.message.edit_text(
            "‚ùå –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –ø—É—Å—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=Keyboards.back_to_main()
        )
        return
    
    await state.set_state(ComplaintStates.choosing_master)
    
    text = f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n{Messages.CHOOSE_MASTER.value}"
    keyboard = Keyboards.masters(employees)
    
    await callback.message.edit_text(text, reply_markup=keyboard)


@router.callback_query(F.data.startswith(CallbackData.MASTER_PREFIX.value), StateFilter(ComplaintStates.choosing_master))
async def choose_master(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞"""
    await callback.answer()
    
    master = callback.data.replace(CallbackData.MASTER_PREFIX.value, "")
    await state.update_data(master=master)
    
    data = await state.get_data()
    
    await state.set_state(ComplaintStates.uploading_photos)
    await state.update_data(photos=[])
    
    text = (
        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
        f"‚úÖ –ú–∞—Å—Ç–µ—Ä: {master}\n\n"
        f"{Messages.UPLOAD_PHOTOS.value}"
    )
    
    keyboard = Keyboards.photos()
    await callback.message.edit_text(text, reply_markup=keyboard)


@router.callback_query(F.data == CallbackData.ADD_PHOTO.value, StateFilter(ComplaintStates.uploading_photos))
async def add_photo_prompt(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ"""
    await callback.answer()
    
    data = await state.get_data()
    photos_count = len(data.get('photos', []))
    
    if photos_count >= 3:  # MAX_PHOTOS
        await callback.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", show_alert=True)
        return
    
    text = f"üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é ({photos_count + 1}/3)"
    await callback.message.edit_text(text)


@router.message(F.photo, StateFilter(ComplaintStates.uploading_photos))
async def handle_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    data = await state.get_data()
    photos = data.get('photos', [])
    
    if len(photos) >= 3:  # MAX_PHOTOS
        await message.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photo_url = await media_handler.get_photo_url(message.bot, message.photo[-1])
    
    if photo_url:
        photos.append(photo_url)
        await state.update_data(photos=photos)
        
        text = f"‚úÖ –§–æ—Ç–æ {len(photos)}/3 –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é:"
        
        if len(photos) >= 3:
            keyboard = Keyboards.photos_next()
        else:
            keyboard = Keyboards.photos()
        
        await message.answer(text, reply_markup=keyboard)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.callback_query(F.data == CallbackData.SKIP_PHOTOS.value, StateFilter(ComplaintStates.uploading_photos))
async def skip_photos(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    await callback.answer()
    
    await state.set_state(ComplaintStates.entering_comment)
    await callback.message.edit_text(Messages.ENTER_COMMENT.value)


@router.message(F.text, StateFilter(ComplaintStates.entering_comment))
async def handle_text_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    await state.update_data(comment=message.text)
    await show_preview(message, state)


@router.message(F.voice, StateFilter(ComplaintStates.entering_comment))
async def handle_voice_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    comment = await media_handler.process_voice_message(message.bot, message.voice)
    
    if comment:
        await state.update_data(comment=comment)
        await show_preview(message, state)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç.")


async def show_preview(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    data = await state.get_data()
    
    await state.set_state(ComplaintStates.preview)
    
    photos_text = ""
    if data.get('photos'):
        photos_text = f"\nüì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(data['photos'])}"
    
    preview_text = (
        "üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—á–∞–Ω–∏—è:\n\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
        f"üë§ –ú–∞—Å—Ç–µ—Ä: {data['master']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}"
        f"{photos_text}\n\n"
        "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—á–∞–Ω–∏–µ?"
    )
    
    keyboard = Keyboards.preview()
    await message.answer(preview_text, reply_markup=keyboard)


@router.callback_query(F.data == CallbackData.SAVE_COMPLAINT.value, StateFilter(ComplaintStates.preview))
async def save_complaint(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã"""
    await callback.answer()
    
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_success = await db.add_complaint(
        employee_telegram_id=callback.from_user.id,
        category=data['category'],
        master_name=data['master'],
        comment=data['comment'],
        photo_urls=data.get('photos', [])
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
    sheets_success = await sheets_manager.add_complaint(
        category=data['category'],
        master=data['master'],
        comment=data['comment'],
        photo_urls=data.get('photos', [])
    )
    
    if db_success and sheets_success:
        text = Messages.COMPLAINT_SAVED.value
    elif db_success:
        text = "‚úÖ –ó–∞–º–µ—á–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Google Sheets."
    else:
        text = Messages.COMPLAINT_ERROR.value
    
    keyboard = Keyboards.send_another()
    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.clear()


@router.callback_query(F.data == CallbackData.RESTART_COMPLAINT.value)
async def restart_complaint(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã"""
    await callback.answer()
    await state.clear()
    await start_complaint(callback, state)


@router.message()
async def handle_other_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if message.chat.type != "private":
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not await has_access(message.from_user.id):
        await message.answer(Messages.ACCESS_DENIED.value)
        return
    
    text = "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."
    await message.answer(text)