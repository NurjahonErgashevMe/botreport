"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram-–±–æ—Ç–∞
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
import logging

from settings.config import TELEGRAM_ADMIN_ID
from settings.database import Database
from utils.google_sheets import GoogleSheetsManager
from .states import ComplaintStates, EmployeeStates
from .keyboards import Keyboards
from .enums import CallbackData, Messages, Categories, ButtonTexts
from utils.media_handler import MediaHandler

logger = logging.getLogger(__name__)
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = Database()
media_handler = MediaHandler()
sheets_manager = GoogleSheetsManager()


async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == TELEGRAM_ADMIN_ID


async def has_access(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –±–æ—Ç—É"""
    if await is_admin(user_id):
        return True
    return await db.is_employee_active(user_id)


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
    if message.chat.type != "private":
        await message.answer("‚ùå –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö.")
        return
    
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not await has_access(user_id):
        await message.answer(Messages.ACCESS_DENIED.value)
        return
    
    await state.clear()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    if await is_admin(user_id):
        keyboard = Keyboards.main_menu_admin()
        text = Messages.WELCOME_ADMIN.value
    else:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        employee = await db.get_employee_by_telegram_id(user_id)
        if employee:
            employee_name = employee[1]  # employee[1] —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            text = f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {employee_name}!\n\n{Messages.WELCOME_EMPLOYEE.value}"
        else:
            text = Messages.WELCOME_EMPLOYEE.value
        
        keyboard = Keyboards.main_menu_employee()
    
    await message.answer(text, reply_markup=keyboard)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ===

@router.message(F.text == ButtonTexts.BACK_TO_MAIN.value)
async def back_to_main(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    user_id = message.from_user.id
    
    if await is_admin(user_id):
        keyboard = Keyboards.main_menu_admin()
        text = Messages.WELCOME_ADMIN.value
    else:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        employee = await db.get_employee_by_telegram_id(user_id)
        if employee:
            employee_name = employee[1]  # employee[1] —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            text = f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {employee_name}!\n\n{Messages.WELCOME_EMPLOYEE.value}"
        else:
            text = Messages.WELCOME_EMPLOYEE.value
        
        keyboard = Keyboards.main_menu_employee()
    
    await message.answer(text, reply_markup=keyboard)

@router.message(F.text == ButtonTexts.SEND_COMPLAINT.value)
async def start_complaint_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–º–µ—á–∞–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not await has_access(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    await start_complaint_process(message, state)

@router.message(F.text == ButtonTexts.MANAGE_EMPLOYEES.value)
async def employees_menu_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    await state.clear()
    keyboard = Keyboards.employees_menu()
    await message.answer(Messages.EMPLOYEES_MENU.value, reply_markup=keyboard)


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê–ú–ò ===

@router.message(F.text == ButtonTexts.BACK_TO_EMPLOYEES.value)
async def back_to_employees(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    await state.clear()
    
    keyboard = Keyboards.employees_menu()
    await message.answer(Messages.EMPLOYEES_MENU.value, reply_markup=keyboard)

@router.message(F.text == ButtonTexts.ADD_EMPLOYEE.value)
async def add_employee_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    await state.set_state(EmployeeStates.entering_employee_id)
    await message.answer(Messages.ADD_EMPLOYEE_ID.value, reply_markup=Keyboards.back_to_employees())


@router.message(StateFilter(EmployeeStates.entering_employee_id))
async def add_employee_id(message: Message, state: FSMContext):
    """–í–≤–æ–¥ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if message.text == ButtonTexts.BACK_TO_EMPLOYEES.value:
        await back_to_employees(message, state)
        return
    
    try:
        employee_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID
        existing = await db.get_employee_by_telegram_id(employee_id)
        if existing:
            await message.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        await state.update_data(employee_id=employee_id)
        await state.set_state(EmployeeStates.entering_employee_name)
        await message.answer(Messages.ADD_EMPLOYEE_NAME.value)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID:")


@router.message(StateFilter(EmployeeStates.entering_employee_name))
async def add_employee_name(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if message.text == ButtonTexts.BACK_TO_EMPLOYEES.value:
        await back_to_employees(message, state)
        return
    
    name = message.text.strip()
    
    if len(name) < 2:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
        return
    
    data = await state.get_data()
    employee_id = data['employee_id']
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = await db.add_employee(employee_id, name)
    
    if success:
        await message.answer(Messages.EMPLOYEE_ADDED.value, reply_markup=Keyboards.employees_menu())
        logger.info(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {name} (ID: {employee_id})")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", reply_markup=Keyboards.employees_menu())
    
    await state.clear()


@router.message(F.text == ButtonTexts.LIST_EMPLOYEES.value)
async def list_employees(message: Message):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    employees = await db.get_employees()
    
    if not employees:
        await message.answer(
            Messages.NO_EMPLOYEES.value,
            reply_markup=Keyboards.employees_menu()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    text = "üë• –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n"
    for _, telegram_id, name in employees:
        text += f"‚Ä¢ {name} - _{telegram_id}_\n"
    
    await message.answer(
        text,
        reply_markup=Keyboards.employees_menu(),
        parse_mode="Markdown"
    )


@router.message(F.text == ButtonTexts.DELETE_EMPLOYEE.value)
async def delete_employee_start(message: Message):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    employees = await db.get_employees()
    
    if not employees:
        await message.answer(
            Messages.NO_EMPLOYEES.value,
            reply_markup=Keyboards.employees_menu()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    text = "üóë –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for i, (_, _, name) in enumerate(employees, 1):
        text += f"{i}. {name}\n"
    
    keyboard = Keyboards.delete_employees(employees)
    await message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("delete_emp_"))
async def confirm_delete_employee(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    await callback.answer()
    
    employee_id = int(callback.data.replace("delete_emp_", ""))
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
    employees = await db.get_employees()
    employee_info = None
    
    for emp_id, telegram_id, name in employees:
        if emp_id == employee_id:
            employee_info = (emp_id, telegram_id, name)
            break
    
    if not employee_info:
        await callback.message.edit_text("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", reply_markup=Keyboards.employees_menu())
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.update_data(delete_employee_id=employee_id)
    
    text = f"‚ùì –¢–æ—á–Ω–æ –ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_info[2]}?"
    keyboard = Keyboards.confirm_delete()
    
    await callback.message.edit_text(text, reply_markup=keyboard)


@router.callback_query(F.data == CallbackData.CONFIRM_DELETE.value)
async def delete_employee_confirmed(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    await callback.answer()
    
    data = await state.get_data()
    employee_id = data.get('delete_employee_id')
    
    if not employee_id:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
        await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", reply_markup=Keyboards.employees_menu())
        return
    
    success = await db.delete_employee(employee_id)
    
    if success:
        text = "‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
    else:
        text = "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
    
    await callback.message.edit_text(text)
    await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", reply_markup=Keyboards.employees_menu())
    await state.clear()


@router.callback_query(F.data == CallbackData.CANCEL_DELETE.value)
async def cancel_delete_employee(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    await callback.answer()
    await state.clear()
    
    await callback.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.answer(Messages.EMPLOYEES_MENU.value, reply_markup=Keyboards.employees_menu())


# === –ü–†–û–¶–ï–°–° –ü–û–î–ê–ß–ò –ñ–ê–õ–û–ë–´ ===

async def start_complaint_process(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã"""
    await state.set_state(ComplaintStates.choosing_category)
    
    keyboard = Keyboards.categories()
    await message.answer(Messages.CHOOSE_CATEGORY.value, reply_markup=keyboard)


@router.message(StateFilter(ComplaintStates.choosing_category))
async def choose_category(message: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if message.text == ButtonTexts.BACK_TO_MAIN.value:
        await back_to_main(message, state)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    valid_categories = [cat.value for cat in Categories]
    if message.text not in valid_categories:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        return
    
    category = message.text
    await state.update_data(category=category)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞ –ø–æ Telegram ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    employee = await db.get_employee_by_telegram_id(message.from_user.id)
    
    if not employee:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=Keyboards.back_to_main()
        )
        return
    
    master_name = employee[1]  # employee[1] —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    await state.update_data(master=master_name)
    
    await state.set_state(ComplaintStates.uploading_photos)
    await state.update_data(photos=[])
    
    text = (
        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        f"‚úÖ –ú–∞—Å—Ç–µ—Ä: {master_name}\n\n"
        f"{Messages.UPLOAD_PHOTOS.value}"
    )
    
    keyboard = Keyboards.photos()
    await message.answer(text, reply_markup=keyboard)





@router.message(F.text == ButtonTexts.SKIP_PHOTOS.value, StateFilter(ComplaintStates.uploading_photos))
async def skip_photos(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    await state.set_state(ComplaintStates.entering_comment)
    await message.answer(Messages.ENTER_COMMENT.value, reply_markup=Keyboards.comment_input())

@router.message(F.text == ButtonTexts.CANCEL_COMPLAINT.value)
async def cancel_complaint(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã"""
    await back_to_main(message, state)


@router.message(F.photo, StateFilter(ComplaintStates.uploading_photos))
async def handle_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    data = await state.get_data()
    photos = data.get('photos', [])
    
    if len(photos) >= 3:  # MAX_PHOTOS
        await message.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3)
    photo_info = await media_handler.get_photo_info(message.bot, message.photo[-1])
    
    if photo_info:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3
        photos.append(photo_info)
        await state.update_data(photos=photos)
        
        if len(photos) >= 3:
            # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ 3 —Ñ–æ—Ç–æ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
            text = f"‚úÖ –§–æ—Ç–æ {len(photos)}/3 –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n\n–í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"
            keyboard = Keyboards.photos_next()
        else:
            # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 3 —Ñ–æ—Ç–æ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å
            text = f"‚úÖ –§–æ—Ç–æ {len(photos)}/3 –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é:"
            keyboard = Keyboards.photos_with_finish()
        
        await message.answer(text, reply_markup=keyboard)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        logger.info(f"–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ: {photo_info['file_id']}, —Ä–∞–∑–º–µ—Ä: {photo_info['width']}x{photo_info['height']}")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@router.message(F.text == ButtonTexts.NEXT_TO_COMMENT.value, StateFilter(ComplaintStates.uploading_photos))
async def next_to_comment(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ"""
    await state.set_state(ComplaintStates.entering_comment)
    await message.answer(Messages.ENTER_COMMENT.value, reply_markup=Keyboards.comment_input())

@router.message(F.text == ButtonTexts.FINISH_PHOTOS.value, StateFilter(ComplaintStates.uploading_photos))
async def finish_photos(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é"""
    await state.set_state(ComplaintStates.entering_comment)
    await message.answer(Messages.ENTER_COMMENT.value, reply_markup=Keyboards.comment_input())





@router.message(F.text, StateFilter(ComplaintStates.entering_comment))
async def handle_text_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    if message.text == ButtonTexts.CANCEL_COMPLAINT.value:
        await cancel_complaint(message, state)
        return
    
    await state.update_data(comment=message.text)
    await show_preview(message, state)


@router.message((F.voice | F.audio), StateFilter(ComplaintStates.entering_comment))
async def handle_voice_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–ª–∏ –∞—É–¥–∏–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("üé§ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ...")
    
    try:
        if message.voice:
            file = message.voice
        else:
            file = message.audio

        comment = await media_handler.process_voice_message(message.bot, file)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        
        if comment:
            await state.update_data(comment=comment)
            await show_preview(message, state)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await processing_msg.delete()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")


async def show_preview(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    data = await state.get_data()
    
    await state.set_state(ComplaintStates.preview)
    
    photos = data.get('photos', [])
    if photos:
        photos_text = f"\nüì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)}"
    else:
        photos_text = "\nüì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ‚ùå"
    
    preview_text = (
        "üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—á–∞–Ω–∏—è:\n\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
        f"üë§ –ú–∞—Å—Ç–µ—Ä: {data['master']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}"
        f"{photos_text}\n\n"
        "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—á–∞–Ω–∏–µ?"
    )
    
    keyboard = Keyboards.preview()
    await message.answer(preview_text, reply_markup=keyboard)


@router.message(F.text == ButtonTexts.SAVE.value, StateFilter(ComplaintStates.preview))
async def save_complaint(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã"""
    data = await state.get_data()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–º–µ—á–∞–Ω–∏–µ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employee = await db.get_employee_by_telegram_id(message.from_user.id)
        employee_name = employee[1] if employee else "unknown"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ S3 (–µ—Å–ª–∏ –µ—Å—Ç—å)
        photo_urls = []
        photos_data = data.get('photos', [])
        
        if photos_data:
            photo_urls = await media_handler.upload_photos_to_s3(
                message.bot, 
                photos_data, 
                employee_name
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_success = await db.add_complaint(
            employee_telegram_id=message.from_user.id,
            category=data['category'],
            master_name=data['master'],
            comment=data['comment'],
            photo_urls=photo_urls
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        sheets_success = await sheets_manager.add_complaint(
            category=data['category'],
            master=data['master'],
            comment=data['comment'],
            photo_urls=photo_urls
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
        await loading_msg.delete()
        
        if db_success and sheets_success:
            text = Messages.COMPLAINT_SAVED.value
        elif db_success:
            text = "‚úÖ –ó–∞–º–µ—á–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Google Sheets."
        else:
            text = Messages.COMPLAINT_ERROR.value
        
        keyboard = Keyboards.send_another()
        await message.answer(text, reply_markup=keyboard)
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∂–∞–ª–æ–±—ã: {e}")
        await loading_msg.delete()
        await message.answer(Messages.COMPLAINT_ERROR.value, reply_markup=Keyboards.send_another())
        await state.clear()

@router.message(F.text == ButtonTexts.DELETE_AND_RESTART.value, StateFilter(ComplaintStates.preview))
async def restart_complaint(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã"""
    await state.clear()
    await start_complaint_process(message, state)

@router.message(F.text == ButtonTexts.SEND_ANOTHER.value)
async def send_another_complaint(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ—â—ë –æ–¥–Ω–æ–≥–æ –∑–∞–º–µ—á–∞–Ω–∏—è"""
    await start_complaint_process(message, state)





# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ï–ò–ó–í–ï–°–¢–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô ===

@router.message()
async def handle_other_messages(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if message.chat.type != "private":
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not await has_access(message.from_user.id):
        await message.answer(Messages.ACCESS_DENIED.value)
        return
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    current_state = await state.get_state()
    message_type = "unknown"
    if message.text:
        message_type = "text"
    elif message.voice:
        message_type = "voice"
    elif message.audio:
        message_type = "audio"
    elif message.photo:
        message_type = "photo"
    
    logger.info(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Ç–∏–ø={message_type}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ={current_state}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={message.from_user.id}")
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç
    if current_state == ComplaintStates.uploading_photos:
        await message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞/–ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é.")
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–æ—Å—å
    if current_state == ComplaintStates.entering_comment:
        if message.voice:
            await message.answer("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            comment = await media_handler.process_voice_message(message.bot, message.voice)
            if comment:
                await state.update_data(comment=comment)
                await show_preview(message, state)
                return
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç.")
                return
        else:
            await message.answer("üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º.")
            return
    
    text = "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."
    await message.answer(text)